diff --git a/opennms-webapp/src/main/java/org/opennms/web/rest/ForeignSourceConfigRestService.java b/opennms-webapp/src/main/java/org/opennms/web/rest/ForeignSourceConfigRestService.java
new file mode 100644
index 0000000..7f08235
--- /dev/null
+++ b/opennms-webapp/src/main/java/org/opennms/web/rest/ForeignSourceConfigRestService.java
@@ -0,0 +1,221 @@
+/*******************************************************************************
+ * This file is part of OpenNMS(R).
+ *
+ * Copyright (C) 2009-2014 The OpenNMS Group, Inc.
+ * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.
+ *
+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
+ *
+ * OpenNMS(R) is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published
+ * by the Free Software Foundation, either version 3 of the License,
+ * or (at your option) any later version.
+ *
+ * OpenNMS(R) is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with OpenNMS(R).  If not, see:
+ *      http://www.gnu.org/licenses/
+ *
+ * For more information contact:
+ *     OpenNMS(R) Licensing <license@opennms.org>
+ *     http://www.opennms.org/
+ *     http://www.opennms.com/
+ *******************************************************************************/
+
+package org.opennms.web.rest;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlElementWrapper;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+import org.opennms.netmgt.provision.persist.ForeignSourceService;
+import org.opennms.netmgt.provision.support.PluginWrapper;
+import org.opennms.web.svclayer.ManualProvisioningService;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+import org.springframework.util.Assert;
+
+import com.sun.jersey.spi.resource.PerRequest;
+
+@Component
+@PerRequest
+@Scope("prototype")
+@Path("foreignSourcesConfig")
+public class ForeignSourceConfigRestService extends OnmsRestService implements InitializingBean {
+
+    @Autowired
+    protected ForeignSourceService m_foreignSourceService;
+
+    @Autowired
+    protected ManualProvisioningService m_provisioningService;
+
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        Assert.notNull(m_foreignSourceService, "ForeignSourceService is required.");
+        Assert.notNull(m_provisioningService, "ManualProvisioningService is required.");
+        // The following is required, otherwise getWrappers() throws a NPE
+        m_foreignSourceService.getPolicyTypes();
+        m_foreignSourceService.getDetectorTypes();
+    }
+
+    @SuppressWarnings("serial")
+    @XmlRootElement(name="plugin-configuration")
+    public static class SimplePluginConfigList extends ArrayList<SimplePluginConfig> {
+        @XmlElement(name="plugin")
+        @XmlElementWrapper(name="plugins")
+        public List<SimplePluginConfig> getPlugins() {
+            return this;
+        }
+    }
+
+    @XmlRootElement(name="plugin")
+    @XmlType(propOrder = { "name", "pluginClass", "parameters" })
+    public static class SimplePluginConfig {
+        @XmlAttribute(name="name")
+        public String name;
+        @XmlAttribute(name="class")
+        public String pluginClass;
+        @XmlElement(name="parameter")
+        @XmlElementWrapper(name="parameters")
+        public List<SimplePluginParameter> parameters = new ArrayList<SimplePluginParameter>();
+        public SimplePluginConfig() {}
+        public SimplePluginConfig(String name, String pluginClass) {
+            this.name = name;
+            this.pluginClass = pluginClass;
+        }
+    }
+
+    @XmlRootElement(name="parameter")
+    @XmlType(propOrder = { "key", "required", "options" })
+    public static class SimplePluginParameter {
+        @XmlAttribute
+        public String key;
+        @XmlAttribute
+        public Boolean required;
+        @XmlElement(name="option")
+        @XmlElementWrapper(name="options")
+        public List<String> options = new ArrayList<String>();
+        public SimplePluginParameter() {}
+        public SimplePluginParameter(String key, Boolean required, List<String> options) {
+            this.key = key;
+            this.required = required;
+            this.options = options;
+        }
+    }
+
+    @SuppressWarnings("serial")
+    @XmlRootElement(name="elements")
+    public static class ElementList extends ArrayList<String> {
+        public ElementList() {
+            super();
+        }
+        public ElementList(Collection<? extends String> c) {
+            super(c);
+        }
+        @XmlElement(name="element")
+        public List<String> getServices() {
+            return this;
+        }
+    }
+
+    public static class ParameterComparator implements Comparator<SimplePluginParameter> {
+        @Override
+        public int compare(SimplePluginParameter o1, SimplePluginParameter o2) {
+            return o1.key.compareTo(o2.key);
+        }
+    }
+
+    @GET
+    @Path("policies")
+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
+    public SimplePluginConfigList getAvailablePolicies() {
+        return getPlugins(true);
+    }
+
+    @GET
+    @Path("detectors")
+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
+    public SimplePluginConfigList getAvailableDetectors() {
+        return getPlugins(false);
+    }
+
+    @GET
+    @Path("services/{groupName}")
+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
+    public ElementList getServices(@PathParam("groupName") String groupName) {
+        final ElementList list = new ElementList(m_provisioningService.getServiceTypeNames(groupName));
+        Collections.sort(list);
+        return list;
+    }
+
+    @GET
+    @Path("assets")
+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
+    public ElementList getAssets() {
+        final ElementList list = new ElementList(m_provisioningService.getAssetFieldNames());
+        Collections.sort(list);
+        return list;
+    }
+
+    @GET
+    @Path("categories")
+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_ATOM_XML})
+    public ElementList getCategories() {
+        final ElementList list = new ElementList(m_provisioningService.getNodeCategoryNames());
+        Collections.sort(list);
+        return list;
+    }
+
+    protected SimplePluginConfigList getPlugins(boolean isPolicies) {
+        SimplePluginConfigList plugins = new SimplePluginConfigList();
+        Map<String,String> typesMap = isPolicies ? m_foreignSourceService.getPolicyTypes(): m_foreignSourceService.getDetectorTypes();
+        for (String pluginClass : typesMap.keySet()) {
+            PluginWrapper wrapper = m_foreignSourceService.getWrappers().get(pluginClass);
+            final String pluginName = typesMap.get(pluginClass);
+            SimplePluginConfig cfg = new SimplePluginConfig(pluginName, pluginClass);
+            List<SimplePluginParameter> requiredParams = new ArrayList<SimplePluginParameter>();
+            List<SimplePluginParameter> optionalParams = new ArrayList<SimplePluginParameter>();
+            for (Map.Entry<String,Boolean> paramEntry : wrapper.getRequired().entrySet()) {
+                final Boolean required = paramEntry.getValue();
+                final String paramName = paramEntry.getKey();
+                final Set<String> options = required ? wrapper.getRequiredItems().get(paramName) : wrapper.getOptionalItems().get(paramName);
+                final List<String> optionList = new ArrayList<String>(options);
+                Collections.sort(optionList);
+                SimplePluginParameter param = new SimplePluginParameter(paramName, required, optionList);
+                if (required) {
+                    requiredParams.add(param);
+                } else {
+                    optionalParams.add(param);
+                }
+            }
+            Collections.sort(requiredParams, new ParameterComparator());
+            Collections.sort(optionalParams, new ParameterComparator());
+            cfg.parameters.addAll(requiredParams);
+            cfg.parameters.addAll(optionalParams);
+            plugins.add(cfg);
+        }
+        return plugins;
+    }
+
+}
diff --git a/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-jersey.xml b/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-jersey.xml
index 2744762..867f038 100644
--- a/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-jersey.xml
+++ b/opennms-webapp/src/main/webapp/WEB-INF/applicationContext-jersey.xml
@@ -12,6 +12,11 @@
     <tx:annotation-driven />
 
     <context:component-scan base-package="org.opennms.web.rest" />
-    
+
+    <!-- This is required for org.opennms.web.rest.ForeignSourceConfigRestService -->
+    <bean name="defaultForeignSourceService" class="org.opennms.netmgt.provision.persist.DefaultForeignSourceService">
+        <property name="pendingForeignSourceRepository" ref="selectedPendingForeignSourceRepository"/>
+        <property name="deployedForeignSourceRepository" ref="selectedDeployedForeignSourceRepository"/>
+    </bean>
 </beans>
 
diff --git a/opennms-webapp/src/test/java/org/opennms/web/rest/ForeignSourceRestServiceTest.java b/opennms-webapp/src/test/java/org/opennms/web/rest/ForeignSourceRestServiceTest.java
index 653cc12..141b20c 100644
--- a/opennms-webapp/src/test/java/org/opennms/web/rest/ForeignSourceRestServiceTest.java
+++ b/opennms-webapp/src/test/java/org/opennms/web/rest/ForeignSourceRestServiceTest.java
@@ -125,6 +125,20 @@ public class ForeignSourceRestServiceTest extends AbstractSpringJerseyRestTestCa
         xml = sendRequest(GET, url, 204);
     }
 
+    @Test
+    public void testConfigDetectors() throws Exception {
+        String url = "/foreignSourcesConfig/detectors";
+        String xml = sendRequest(GET, url, 200);
+        System.err.println(xml);
+    }
+
+    @Test
+    public void testConfigPolicies() throws Exception {
+        String url = "/foreignSourcesConfig/policies";
+        String xml = sendRequest(GET, url, 200);
+        System.err.println(xml);
+    }
+
     private void createForeignSource() throws Exception {
         String fs =
             "<foreign-source xmlns=\"http://xmlns.opennms.org/xsd/config/foreign-source\" name=\"test\">" +
